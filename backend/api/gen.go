// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CabinetDetail defines model for CabinetDetail.
type CabinetDetail struct {
	Drawers *[]DrawerDetail     `json:"drawers,omitempty"`
	Id      *openapi_types.UUID `gorm:"column:uuid" json:"id,omitempty"`
	Name    *string             `json:"name,omitempty"`
}

// CabinetList defines model for CabinetList.
type CabinetList struct {
	Items      *[]CabinetSummary `json:"items,omitempty"`
	NextCursor *UUID             `json:"nextCursor,omitempty"`
}

// CabinetSummary defines model for CabinetSummary.
type CabinetSummary struct {
	Id   *openapi_types.UUID `gorm:"column:uuid" json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// DrawerDetail defines model for DrawerDetail.
type DrawerDetail = DrawerSummary

// DrawerSummary defines model for DrawerSummary.
type DrawerSummary struct {
	Id    *openapi_types.UUID `gorm:"column:uuid" json:"id,omitempty"`
	Label *string             `json:"label,omitempty"`
}

// ServerStatus defines model for ServerStatus.
type ServerStatus = map[string]interface{}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// CabinetsListParams defines parameters for CabinetsList.
type CabinetsListParams struct {
	// Cursor Cursor used for paginated responses
	Cursor *UUID `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List cabinets
	// (GET /cabinets)
	CabinetsList(c *gin.Context, params CabinetsListParams)
	// Get cabinet and contents
	// (GET /cabinets/{cabinetId})
	CabinetGet(c *gin.Context, cabinetId UUID)

	// (GET /status)
	StatusGet(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CabinetsList operation middleware
func (siw *ServerInterfaceWrapper) CabinetsList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CabinetsListParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CabinetsList(c, params)
}

// CabinetGet operation middleware
func (siw *ServerInterfaceWrapper) CabinetGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "cabinetId" -------------
	var cabinetId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "cabinetId", c.Param("cabinetId"), &cabinetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cabinetId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CabinetGet(c, cabinetId)
}

// StatusGet operation middleware
func (siw *ServerInterfaceWrapper) StatusGet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StatusGet(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/cabinets", wrapper.CabinetsList)
	router.GET(options.BaseURL+"/cabinets/:cabinetId", wrapper.CabinetGet)
	router.GET(options.BaseURL+"/status", wrapper.StatusGet)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWTW/jNhD9K8R0j3asbBZFq1sRowsDW7RAkFPgArQ0krkQSe1wuOvU0H8vSFHyh+yu",
	"e2hzSfgxfPNm5s1Yeyisbq1Bww7yPbhii1rG5aPcKIO8RJaqCQeyaX6vIH/ZwzvCCnL4YXF4vEgvF+nZ",
	"k9da0it0sz20ZFskVhhxS5LfkOJSMeq4+CfAZbRPNLoZ8GuLkIMkkq/QHQ7s5jMWDN16cjIbYvmkHAd3",
	"p4RGFjfRmcR3RmgGBnf86MlZ+h7W8/NqeSmEkfDgZcq5DH8rS1oy5OC9KmGEcUzK1DCD3dzKVs0LW2KN",
	"Zo47JjlnWUeI2pKGHArbeG3yiBCoGKkxXJ9iXSR5UpmbBdK/GvO3vgr8BsE3coPNjdE/IX1FemLJ3h09",
	"ORjE6l4gquXuE5qat5A//DgDrczxtpXMSAZy+PMlm/8s59V6/1M3H9cfbljfv+/eTTLShSiUqWwkq7gJ",
	"d49jfcRSstxIhzCDr0hO2cAhu7u/y0IwtkUjWwU5PNxldw8QiW5j4IuiF2ufWIwdVqIrSLXco4S+E4OV",
	"+KZ4K1pZKyPjfQSnuF6VgVMyjN0a/JDUyHFkvJwj930mvMNSVJYGWCwFoWutceggRA05fPFIrzAIHIq+",
	"Q2dp5N3aqucEfpM7pb0WxusNkrCViFNEsBWE7Mlccd8orfjEe4mV9A1Dfp9lUSQBd9gpk3ZjVZVhrJGg",
	"Cx10CDbfw/ssC/8KaxhNrIZs20YVMcOLzy7w3t8Y9vHgjAI6jf7JFwU6V/lGjDUMavmQ3U9V8Gyk560l",
	"9ReWvdHD1OhXSxtVlmhi07lhBJxKKGg7NvILpCNYB/NRiYt9Wq3K7qoqPyKLlCQXCieFU6ZucHBzTZgf",
	"8buyXC0DYMKZaiG0zpESB6oQCvnFK8ISciaP/1Kc/4MQhp/ht5RCrFtKrTTlWMOrqnDjjE46OC1rP8L7",
	"qv5n+Tv5tbiUvngvlBNblA1v06dNiidFsO6ODiejcJivW9uUytQifWhFJR4+8s5lB9OZtrz0UDS2iIM1",
	"jG9ljnsxAfb+LuA9XvI+nF2w/+WPlUgRj/Zp3627vwMAAP//yIKdPLMKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
