x-go:
  # Environment variables to configure go to use a persistent cache.
  envrionment: &go-environment
    GOCACHE: /gocache/go-build
    GOMODCACHE: /gocache/mod
    GOFLAGS: -buildvcs=false

services:
  # Database instance. Note that the backend and dev databases themselves are created by an
  # initialisation script.
  db:
    profiles:
      - dev
      - prod
      - tool
    image: &db-image postgres:16
    environment:
      POSTGRES_PASSWORD: postgres-pass
    healthcheck:
      test:
        - CMD
        - pg_isready
        - --dbname
        - postgresql://backend-user:backend-pass@db:5432/backend?sslmode=disable
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: 120s
      start_interval: 1s
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./compose/db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  # psql command line tool running in the persisted database. Has the project root mounted
  # read-write under /workspace which is also the working directory.
  psql:
    profiles:
      - tool
    image: *db-image
    entrypoint:
      - "psql"
      - "--dbname"
      - postgresql://postgres:postgres-pass@db:5432/backend?sslmode=disable
    working_dir: /workspace
    volumes:
      - ./:/workspace
    depends_on:
      db:
        condition: service_healthy

  # Run the atlas migration tool
  atlas:
    profiles:
      - tool
    image: arigaio/atlas:0.25.0
    working_dir: /workspace/db
    volumes:
      - ./:/workspace/:ro
    depends_on:
      db:
        condition: service_healthy

  # Run database migrations
  db-migrate:
    profiles:
      - dev
      - prod
    extends:
      service: atlas
    command: ["schema", "apply", "--env", "local", "--auto-approve"]

  # The API backend running with the production container.
  backend-prod:
    profiles:
      - prod
    build:
      target: backend
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/status"]
      interval: 5m
      retries: 10
      start_period: 120s
      start_interval: 1s
    working_dir: /usr/src/backend
    environment:
      DATABASE_DSN: postgresql://backend-user:backend-pass@db:5432/backend?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully

  # The API backend running with hot-reload and with local-developer friendly options.
  backend-dev:
    profiles:
      - dev
    extends:
      service: backend-prod
    build:
      dockerfile_inline: |
        FROM golang:1.22
        RUN go install github.com/air-verse/air@v1.52.3
      target: ""
    command:
      [
        "air",
        "-tmp_dir",
        "../../air-tmp",
        "-build.cmd",
        "go build -o /air-tmp/main",
        "-build.bin",
        "/air-tmp/main",
      ]
    volumes:
      - ./:/usr/src/:ro
      - golang-cache:/gocache
      - air-tmp:/usr/air-tmp
    environment:
      <<: *go-environment

  # Run the backend test suite.
  backend-test:
    profiles:
      - tool
    image: golang:1.22
    working_dir: /usr/src/backend
    command: ["go", "test", "./..."]
    volumes:
      - ./:/usr/src/:ro
      - golang-cache:/gocache
    environment:
      <<: *go-environment
      TESTING_DATABASE_DSN: postgresql://postgres:postgres-pass@db:5432/test?sslmode=disable
    depends_on:
      db:
        condition: service_healthy

volumes:
  db-data:
  golang-cache:
  air-tmp:
