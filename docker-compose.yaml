x-go-env: &go-env
  GOCACHE: /gocache/go-build
  GOMODCACHE: /gocache/mod
  GOFLAGS: -buildvcs=false

# Re-usable constants
x-constants:
  # postgresql://-style URL to connect to the backend database.
  - &db-url postgresql://backend-user:backend-pass@db:5432/backend?sslmode=disable

x-backend-env: &backend-env
  DATABASE_DSN: *db-url

services:
  # Databases. We have two: a database used for the backend itself which persists data in a volume
  # and an ephemeral database used only for migrations and testing.
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: backend
      POSTGRES_USER: backend-user
      POSTGRES_PASSWORD: backend-pass
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready --timeout=3 "--dbname=user=$${POSTGRES_USER} password=$${POSTGRES_PASSWORD} dbname=$${POSTGRES_DB} connect_timeout=3"
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: 120s
      start_interval: 1s
    volumes:
      - db-data:/var/lib/postgresql/data

  ephemeral-db:
    extends:
      service: db
    profiles:
      - test
      - atlas
    environment:
      POSTGRES_DB: ephemeral
      POSTGRES_USER: ephemeral-user
      POSTGRES_PASSWORD: ephemeral-pass
    volumes: []

  # psql command line tool running in the persisted database. Has the project root mounted
  # read-write under /workspace which is also the working directory.
  psql:
    extends:
      service: db
    entrypoint:
      - "psql"
      - "--dbname"
      - *db-url
    working_dir: /workspace
    volumes:
      - ./:/workspace
    profiles:
      - tools
    depends_on:
      db:
        condition: service_healthy

  # -------------

  db-migration:
    image: arigaio/atlas:0.25.0
    working_dir: /usr/src/backend
    volumes:
      - ./:/usr/src/:ro
    command:
      - "migrate"
      - "apply"
      - "--url"
      - *db-url
    depends_on:
      db:
        condition: service_healthy

  backend:
    build:
      dockerfile_inline: |
        FROM golang:1.22
        RUN go install github.com/air-verse/air@v1.52.3
    command:
      [
        "air",
        "-tmp_dir",
        "../../air-tmp",
        "-build.cmd",
        "go build -o /air-tmp/main",
        "-build.bin",
        "/air-tmp/main",
      ]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/status"]
      interval: 5m
      retries: 10
      start_period: 120s
      start_interval: 1s
    working_dir: /usr/src/backend
    ports:
      - 8000:8000
    volumes:
      - ./:/usr/src/:ro
      - golang-cache:/gocache
      - air-tmp:/usr/air-tmp
    environment:
      <<: [*backend-env, *go-env]
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  atlas:
    build:
      dockerfile_inline: |
        FROM golang:1.22
        WORKDIR /usr/src/backend
        COPY --from=arigaio/atlas:0.25.0 /atlas /opt/atlas/bin/atlas
        ENTRYPOINT ["/opt/atlas/bin/atlas"]
    working_dir: /usr/src/backend
    environment:
      <<: *go-env
    volumes:
      - ./:/usr/src/
      - golang-cache:/gocache
    profiles:
      - tools
    depends_on:
      atlas-dev-db:
        condition: service_healthy

  atlas-dev-db:
    image: postgres:16
    environment:
      POSTGRES_DB: atlas-dev
      POSTGRES_USER: atlas-dev-user
      POSTGRES_PASSWORD: atlas-dev-password
    healthcheck:
      test:
        - CMD
        - pg_isready
        - --dbname=postgresql://atlas-dev-user:atlas-dev-password@localhost:5432/atlas-dev
      interval: 1s
      timeout: 5s
      retries: 10
      start_period: 120s
    profiles:
      - tools

  atlas-make-migrations:
    extends:
      service: atlas
    command: ["migrate", "diff", "--env", "gorm"]

  backend-test:
    image: golang:1.22
    working_dir: /usr/src/backend
    command: ["go", "test", "./..."]
    volumes:
      - ./:/usr/src/:ro
      - golang-cache:/gocache
    environment:
      <<: *go-env
      TESTING_DATABASE_DSN: postgresql://test-user:test-pass@test-db:5432/test?sslmode=disable
    profiles:
      - test
    depends_on:
      test-db:
        condition: service_healthy

  test-db:
    image: postgres:16
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: test-user
      POSTGRES_PASSWORD: test-pass
    profiles:
      - test
    healthcheck:
      test:
        - CMD
        - pg_isready
        - --dbname=postgresql://test-user:test-pass@localhost:5432/test
      interval: 1s
      timeout: 5s
      retries: 10
      start_period: 120s

  prod-backend:
    build:
      target: backend
    ports:
      - 8000:8000
    profiles:
      - production
    environment:
      <<: *backend-env
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

volumes:
  db-data:
  golang-cache:
  air-tmp:
