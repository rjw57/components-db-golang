x-backend-env: &backend-env
  DATABASE_DSN: "user=components-user password=components-pass dbname=components host=db sslmode=disable"

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: components
      POSTGRES_USER: components-user
      POSTGRES_PASSWORD: components-pass
    healthcheck:
      test:
        - CMD
        - pg_isready
        - --dbname=postgresql://components-user:components-pass@localhost:5432/components
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - db-data:/var/lib/postgresql/data

  db-migration:
    image: arigaio/atlas:0.25.0
    working_dir: /usr/src/backend
    volumes:
      - ./:/usr/src/:ro
    command:
      - "migrate"
      - "apply"
      - "--url"
      - "postgresql://components-user:components-pass@db:5432/components?sslmode=disable"
    depends_on:
      db:
        condition: service_healthy

  psql:
    image: postgres:16
    entrypoint:
      - "psql"
      - "--dbname=postgresql://components-user:components-pass@db:5432/components"
    working_dir: /usr/src/
    volumes:
      - ./:/usr/src/:ro
    profiles:
      - tools
    depends_on:
      db:
        condition: service_healthy

  backend:
    build:
      dockerfile_inline: |
        FROM golang:1.22
        RUN go install github.com/air-verse/air@v1.52.3
        WORKDIR /usr/src/backend
        HEALTHCHECK \
          --interval=1s --timeout=5s --retries=10 --start-period=60s \
          CMD curl --fail http://localhost:8000/status
    command:
      [
        "air",
        "-tmp_dir",
        "../../air-tmp",
        "-build.cmd",
        "go build -o /air-tmp/main",
        "-build.bin",
        "/air-tmp/main",
      ]
    working_dir: /usr/src/backend
    ports:
      - 8000:8000
    volumes:
      - ./:/usr/src/:ro
      - golang-cache:/gocache
      - air-tmp:/usr/air-tmp
    environment:
      <<: *backend-env
      GOCACHE: /gocache
      GOFLAGS: -buildvcs=false
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  atlas:
    build:
      dockerfile_inline: |
        FROM golang:1.22
        WORKDIR /usr/src/backend
        COPY --from=arigaio/atlas:0.25.0 /atlas /opt/atlas/bin/atlas
        ENTRYPOINT ["/opt/atlas/bin/atlas"]
    working_dir: /usr/src/backend
    environment:
      GOCACHE: /gocache
    volumes:
      - ./:/usr/src/
      - golang-cache:/gocache
    profiles:
      - tools
    depends_on:
      atlas-dev-db:
        condition: service_healthy

  atlas-dev-db:
    image: postgres:16
    environment:
      POSTGRES_DB: atlas-dev
      POSTGRES_USER: atlas-dev-user
      POSTGRES_PASSWORD: atlas-dev-password
    healthcheck:
      test:
        - CMD
        - pg_isready
        - --dbname=postgresql://atlas-dev-user:atlas-dev-password@localhost:5432/atlas-dev
      interval: 1s
      timeout: 5s
      retries: 10
    profiles:
      - tools

  prod-backend:
    build:
      target: backend
    ports:
      - 8000:8000
    profiles:
      - production
    environment:
      <<: *backend-env
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

volumes:
  db-data:
  golang-cache:
  air-tmp:
